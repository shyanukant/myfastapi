name : Build and Deploy Code 

on: [push, pull_request]

jobs:
  build:
    environment:
      name: Testing
    env:
      HOST: ${{secrets.POSTGRES_SERVER}} 
      USER: ${{secrets.POSTGRES_USER}} 
      PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
      PORT: ${{secrets.POSTGRES_PORT}} 
      DATABASE: ${{secrets.POSTGRES_DB}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
          POSTGRES_DB: ${{secrets.POSTGRES_DB}}_test
        ports: 
        - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps:
      - name: pulling git repo
        uses: actions/checkout@v4
      - name: Install python version
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.8"
      - name: update pip
        run: python -m pip install --upgrade pip
      - name: Inall all dependencies
        run: pip install -r requirements.txt
      - name: Test with pytest
        run: |
          pip install pytest
          pytest

      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{secrets.DOCKER_HUB_USERNAME}}
      #     password: ${{secrets.DOCER_HUB_ACCESS_TOKEN}}

      # - name: Set up Docker Buildx
      #   id: buildx
      #   uses: docker/setup-buildx-action@v3

      # - name: Build and Push
      #   id: docker_build
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: ./
      #     file: ./Dockerfile
      #     push: true 
      #     tags: ${{ secrets.DOCKER_HUB_USERNAME }}/blogfastapi:latest
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache
      # - name: Image digest
      #   run: echo ${{ steps.docker_build.output.digest }}
  
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    environment:
      name: production

    steps:
      - name: deploy to ubuntu server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          password: ${{ secrets.PROD_PASSWORD }}
          script: |
            cd app/src
            git pull
            echo ${{ secrets.PROD_PASSWORD }} | sudo -S systemctl restart ${{ sercrets.SERVICE }}